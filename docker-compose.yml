services:
  config-server:
    image: ghcr.io/internal-job-portal/config-server:latest
    ports:
      - "8888:8888"
    environment:
      - TZ=${TZ}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONFIG_PROFILE=${CONFIG_PROFILE}
      - CONFIG_GIT_URI=${CONFIG_GIT_URI}
    networks:
      - ijp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: docker.io/confluentinc/cp-kafka:latest
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: "bad32baa5d2f41daa80318fecf86017b"
    networks:
      - ijp-network
    volumes:
      - kafka_data:/var/lib/kafka/data

  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"  # Dashboard enabled but insecure (for development only)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"     # Web traffic
      - "8088:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ijp-network
    restart: unless-stopped

  api-gateway:
    image: ghcr.io/internal-job-portal/api-gateway:latest
    ports:
      - "8080:8080"
    environment:
      - TZ=${TZ}
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - LOGIN_SERVICE_URI=${LOGIN_SERVICE_URI}
      - HR_SERVICE_URI=${HR_SERVICE_URI}
      - JOB_SERVICE_URI=${JOB_SERVICE_URI}
      - CANDIDATE_SERVICE_URI=${CANDIDATE_SERVICE_URI}
      - EMPLOYEE_SERVICE_URI=${EMPLOYEE_SERVICE_URI}
    depends_on:
      kafka:
        condition: service_started
      config-server:
        condition: service_healthy
    networks:
      - ijp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`ijp.example.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  login-service:
    image: ghcr.io/internal-job-portal/login-service:latest
    ports:
      - "8081:8081"
    environment:
      - TZ=${TZ}
      - LOGIN_SERVICE_PORT=${LOGIN_SERVICE_PORT}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - HR_SERVICE_URI=${HR_SERVICE_URI}
      - EMPLOYEE_SERVICE_URI=${EMPLOYEE_SERVICE_URI}
    networks:
      - ijp-network
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  hr-service:
    image: ghcr.io/internal-job-portal/hr-service:latest
    ports:
      - "8082:8082"
    environment:
      - TZ=${TZ}
      - PROFILE=${PROFILE}
      - HR_SERVICE_PORT=${HR_SERVICE_PORT}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - HR_DB_NAME=${HR_DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - H2_USERNAME=${H2_USERNAME}
      - H2_PASSWORD=${H2_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - ijp-network
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  job-service:
    image: ghcr.io/internal-job-portal/job-service:latest
    ports:
      - "8083:8083"
    environment:
      - TZ=${TZ}
      - PROFILE=${PROFILE}
      - JOB_SERVICE_PORT=${JOB_SERVICE_PORT}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - JOB_DB_NAME=${JOB_DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - H2_USERNAME=${H2_USERNAME}
      - H2_PASSWORD=${H2_PASSWORD}
      - CANDIDATE_SERVICE_URI=${CANDIDATE_SERVICE_URI}
    networks:
      - ijp-network
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  candidate-service:
    image: ghcr.io/internal-job-portal/candidate-service:latest
    ports:
      - "8084:8084"
    environment:
      - TZ=${TZ}
      - PROFILE=${PROFILE}
      - CANDIDATE_SERVICE_PORT=${CANDIDATE_SERVICE_PORT}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - CANDIDATE_DB_NAME=${CANDIDATE_DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - H2_USERNAME=${H2_USERNAME}
      - H2_PASSWORD=${H2_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - ijp-network
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  employee-service:
    image: ghcr.io/internal-job-portal/employee-service:latest
    ports:
      - "8085:8085"
    environment:
      - TZ=${TZ}
      - PROFILE=${PROFILE}
      - EMPLOYEE_SERVICE_PORT=${EMPLOYEE_SERVICE_PORT}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - EMPLOYEE_DB_NAME=${EMPLOYEE_DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - H2_USERNAME=${H2_USERNAME}
      - H2_PASSWORD=${H2_PASSWORD}
    networks:
      - ijp-network
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    image: ghcr.io/internal-job-portal/frontend:latest
    environment:
      - TZ=${TZ}
    networks:
      - ijp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`ijp.example.com`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      api-gateway:
        condition: service_healthy

  postgres:
    image: docker.io/library/postgres:17
    environment:
      - TZ=Asia/Kolkata
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_MULTIPLE_DATABASES}
      - PGPORT=5432
    ports:
      - "5432:5432"
    volumes:
      - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ijp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  kafka_data:

networks:
  ijp-network:
    name: ijp-network
